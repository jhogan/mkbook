#!/bin/bash

###############################################################################
# A script to turn files in various formats to m4b files.  This script is
# optimized for LibriVox zip files but can be used to convert any source 
# (ideally) of audio files into m4b format.
#
# For documentation type: mkbook -h
#
# Note on conventions:
#   Uppercase variables are global. Lowercase variables are local. Use short
#   but descriptive names for variables and functions.
###############################################################################


###############################################################################
# Wish list
# Non-mp3s: Currenly only mp3s are supported. Why not wavs, oggs, etc...
# Options: Currently options/parameters must come before the sources and 
#          destination. It would be nice if they could go anywhere.
# Default image overlay: Put the title over the default image if the default is
#                        used.
###############################################################################

# Set some constants
ME=`basename "$0"`

# This cover art is 300x300 and can be used as a default image
DEFAULTIMAGE=http://wiki.librivox.org/images/a/ad/M4BCoverTemplate.jpg

function die(){
    cleanup
    warn "$1"
    exit 1
}

function warn(){
    # print to stderr
    echo "$1" 1>&2
}
function lc() {
    # echo lowercased version of $1
    echo $1 | tr "[:upper:]" "[:lower:]"
}
function getusage(){
    # echo usage string
    echo "Usage: $ME [OPTIONS] source... destination"
}

function printhelp(){
    echo "NAME
    $ME

SYNOPSIS
    "`getusage`"

DESCRIPTION
    $ME turns a source of audio files into an m4b file. m4b files are audio files
    optimized for audiobooks. They contain metadata (the book's title, writer,
    album, year and cover art) and can be bookmarked (your mp3 player won't
    forget where you left off).

OPTIONS 
    -a (Album)   The name of the album.
    -i (Infer)   Instructs $ME to infer recording's metadata (writer, title, etc...).
    -p (Picture) The path to the cover art. This can be a local or remote source(ftp/http).
                 If this is empty a default image is used.
    -t (Title)   The title for the m4b.
    -w (Writer)  The writer for the m4b.
    -y (Year)    The year for the m4b.

EXAMPLES:

    Single Source

    # Create an m4b of On Liberty from remote zip file. All metadata is specified. Output file will end up here: ~/books/on-liberty.m4b 
    $ME -w "John Stewart Mill" -t "On Liberty" -a "On Liberty" -p ~/coverart.jpg -y 1859 http://www.archive.org/download/on_liberty_librivox/on_liberty_librivox_64kb_mp3.zip ~/books

    # Create the book above but allow $ME to guess/infer the metadata. The coverart will be a default image.
    $ME -i http://www.archive.org/download/on_liberty_librivox/on_liberty_librivox_64kb_mp3.zip ~/books
    
    # Same as above except the source is a local zip file
    $ME -i ~/on-liberty.zip ~/books

    # Create an m4b in ~/books based on mp3s in ~/mp3s. Metadata must be provided since there is no way to guess because the source is a directory.
    $ME -w "John Stewart Mill" -t "On Liberty" -a "On Liberty" -y 1859 ~/mp3s ~/books

    Multiple Sources
    
    Zip files (local and remote) can be provided as multiple
    sources. Directories, however can't. Metadata can't be supplied
    when using multiple sources because this would clutter the command
    line. Instead, the metadata is inferred from the name of the source. If
    you want to create more than one m4b at a time while providing
    metadata to at least one then invoke $ME from different shells.

    # Create an m4b in ~/books from a local and a remote zip file. Metadata is inferred from each.
    $ME ~/utilitarianism.zip http://www.archive.org/download/on_liberty_librivox/on_liberty_librivox_64kb_mp3.zip ~/books

    # The below wont work. We are trying to create an m4b from a zip file and a direct source
    # but a directory source can't be included as part of a multiple source job.
    $ME ~/on-liberty.zip ~/utilitarianism  ~/books

AUTHORS:
    Written by Jesse Hogan

EXIT STATUS
    The exit status will be 0 on success and 1 if there was a problem.

KNOWN ISSUES
    Currently there is no support for chapters. The resulting m4b file
    is essentially one large chapter.

    The output is currently extremely verbose.

    It can take around an hour to process 1 book.
"
    
}
function usage(){
    # print usage and die
    local MSG="$1"
    warn "$MSG"
    warn "`getusage`"
    die  "Try '$ME -h' for more information"
}

function chkdepends(){
    # Determine if all dependencies are met. If not,
    # find a package manager and offer to invoke it to
    # install unmet dependencies.

    local deps='unzip wget mplayer faac mp3wrap convert'
    local pkgmans='apt-get zypper yum emerge'
    for dep in $deps; do
        if ! which "$dep" &>/dev/null; then
            unmet="$unmet$dep "
        fi
    done

    # The package name is imagemagick though there are no
    # programs called that so we s/convert/imagemagick
    unmet="`echo "$unmet"| sed "s/convert/imagemagick/"`" \
        || die "sed failed to s/convert/imagemagick"

    if [ -n "$unmet" ]; then
        # Find the systems package manager
        for pkgman in $pkgmans; do
            if which "$pkgman" &>/dev/null; then
                break
            fi
        done
        # If found then invoke
        if [ -n "$pkgman" ]; then
            local response
            local cmd="sudo $pkgman install $unmet"
            local msg="The following progams need to be installed: $unmet
Would you like me to go ahead and do that with this command: $cmd
You may need to provide your password. [Yn]"

            read -n1 -p"$msg" response; echo
            [ -z "$response" -o "x$response" = "xY" ] && response=y
            if [ "$response" = "y" ]; then
                $cmd || die "$pkgman failed to install: $unmet"
            else
                echo
                die "$ME needs the following packages installed in order to run: $unmet"
            fi
        else
            die "Install the following packages first: $unmet"
        fi
    fi
    return 0
}

function cleanup(){
    # Cleanup tmp diretory
    if [ -d "$TMPDIR" ]; then
        warn "Removing $TMPDIR"
        #rm -rf "$TMPDIR" || exit 1
    fi
}
function getsrctype(){
    # Currently source types are "zip" and "dir"
    # Source can be a url for a zip and still be 
    # considered a zip (http://libr.com/some.zip).
    local src="$1"
    local srctype=`expr "$src" : "^.\+\.\(.\+\)$"`
    srctype="`lc "$srctype"`"
    if [ -z "$srctype" ]; then
        if [ -d "$src" ]; then
            echo "dir"
        fi
    else
        echo "$srctype"
    fi
}
function capitalize(){
    # Capitalizes a string of words
    # "one two three" -> "One Two Three"
    local s=$1
    for i in $s;do 
        cap=`echo -n "${i:0:1}" | tr "[:lower:]" "[:upper:]"`; 
        echo -n "${cap}${i:1} "; 
    done
}

function infer(){
    # Set metadata variable based on the file name
    # or whatever else. This allows a user to not 
    # always set this explicitly if they don't 
    # want to or can't.
    local file="`basename "$1"`"
    TITLE="`echo "$file" |\
            sed -e "s/_[0-9][0-9]kb//i" \
                -e "s/_mp3//i" \
                -e "s/\.zip$//i" \
                -e "s/_librivox//i" \
                -e "s/_[0-9]\+//g" \
                -e "s/_/ /g"`"
    TITLE="`capitalize "$TITLE"`"
    WRITER="$TITLE"
    ALBUM="$TITLE"
    YEAR=`date +"%Y"`
}
function getpicture(){
    # Gets the cover art for the m4b
    local tmpdir="$1"
    local prescale
    if [ -z "$PICTURE" ];then
        # No picture was set by user so 
        # download default cover art
        
        tmppic="$tmpdir/ca.jpg"
        wget -v "$DEFAULTIMAGE" -O "$tmppic"
    else
        # User might have specified a remote (http/ftp)
        # or local picture. Get the picture if remote
        # and then scale/resize it with `convert`.
        local ext=`expr "$PICTURE" : ".*\.\(.\+\)$"`
        local tmppic=$tmpdir/ca.$ext

        local remotepic=`isremote "$PICTURE"`
        [ $remotepic -eq 1 ] && remotepic=true || remotepic=false
        if $remotepic; then
            prescale="$tmpdir/prescale.$ext"
            wget "$PICTURE" -O "$prescale" || die "wget failed to get $PICTURE"
        else
            prescale="$PICTURE"
        fi
        
        # See if the file is of the correct dimentions (300x300).
        # If not, `convert` it to 300x300
        local dims=`identify -format "%wX%h" $prescale`

        if [ "$dims" != "300X300" ]; then
            convert "$prescale" -resize 300x300\! "$tmppic" || die "convert failed to resize $prescale -> $tmppic"
        fi
    fi
    echo "$tmppic"
}
function isremote(){
    # Determine if a source is on the local file system
    # or on another computer
    local src="$1"
    if echo "$src" | grep -i "^\(https\?\|ftp\):" >/dev/null; then
        echo 1
    else
        echo 0
    fi
}

function makebook(){
    # This is where a single source ($src) is converted into
    # an m4b
    local src="$1"
    local infer=$2
    local mp3dir

    # Infer the metadata
    if $infer; then infer "$src"; fi

    # Determine if $src is on local computer or not
    local remotesrc=false
    if echo "$src" | grep -i "^\(https\?\|ftp\):" >/dev/null; then
       remotesrc=true 
    fi

    # Prepare a temp directory to place our temp files.
    # Note that the temp directory will be deleted recursivly
    # so consider this if you want to change this location.
    local tmpdir=~/tmp/${ME}-$$
    mkdir -p "$tmpdir" 2>/dev/null

    [ -d "$tmpdir" ]   || die "failed to create temp directory: $tmpdir"

    chmod 700 "$tmpdir" || die "failed chmod'ing temp directory: $tmpdir"
    #rm "$tmpdir/*" -rf || die "failed rm'ing temp directory: $tmpdir"

    # Get the coverart
    local pic="`getpicture "$tmpdir"`"

    # Get the type of source (directory, zip file)
    local srctype=`getsrctype "$src"`
    [ "$srctype" = 'dir' ] && mp3dir="$src" \
                           || mp3dir="$tmpdir/mp3s"

    # Prepare the mp3dir. This is where audio files
    # will be found/created 
    mkdir "$mp3dir"    2>/dev/null

    # This is the log mplayer will make as it converts the mp3 data
    # to pcm. It will be analyzed to provide values to faac.
    local mp_log="$tmpdir/mp.log"

    # mp3wrap officiously tags the output file with _MP3WRAP so we
    # have to work around it
    local mp3wrappedfile="wrapped"
    local mp3wrappedtaggedfile="$tmpdir/${mp3wrappedfile}_MP3WRAP.mp3" 
    local mp3wrappedfile="$tmpdir/${mp3wrappedfile}.mp3"

    # The name of the pcmfile mplayer makes from mp3
    local pcmfile="$tmpdir/wrapped.pcm"

    # Determine a name for the zip file; 
    # the unqualified filename of source.
    local basename=`basename "$src"`

    # Lowercase the title and add a .zip extention
    local zipfile="`lc "$TITLE"`".zip

    # Clean up spaces in the zip file's name
    zipfile="$tmpdir/`echo "$zipfile" | sed -e "s/ /-/g"`"

    local m4bfile
    if [ "$srctype" != 'dir' ]; then
        # If source is a zip then take the basename
        # of source, replace the .zip with .m4b and prepend
        # the destination. 
        m4bfile=`echo "$basename" | sed "s/\.zip$/.m4b/i"`
        m4bfile="$DEST/$m4bfile"
    else
        # If source is a directory then use
        # the title as the m4b file name
        m4bfile="$DEST/$TITLE.m4b"
    fi

    if $remotesrc; then
        # If the source is remote we will have to wget it.
        wget  "$src" -O $zipfile || die "failed wget'ing source: $src" 2>&1|grep -v "^ "
    else
        # If source is local then the zipfile source will need 
        # to be $src
        zipfile="$src"
    fi

    if [ "$srctype" = "zip" ]; then
        # If the source is a zip then unzip it to the mp3dir
        echo "unzipping $zipfile to $mp3dir"
        unzip "$zipfile" -d "$mp3dir" >/dev/null || die "failed unzip'ing zip file: $zipfile"
    fi

    # Concatenate all mp3s into one big one. Then we can use this big file
    # for future processing and will eventually be converted into an m4b.
    # Use a sub-shell to preserve spaces in filenames passed to mp3wrap
    sh -c "mp3wrap  \"${mp3wrappedfile}\" ${mp3dir}/*.mp3" || die "failed mp3wrap'ing mp3s in: $mp3dir"

    # Correct mprwrap's unrequested tagging of its output file
    mv -v "$mp3wrappedtaggedfile" "$mp3wrappedfile" 

    sleep 60

    # Convert wrapped file to pcm data
    echo "Converting $mp3wrappedfile -> $pcmfile"
    mplayer -vc null -vo null -ao "pcm:nowaveheader:fast:file=${pcmfile}" "${mp3wrappedfile}" 2>&1 | tee "$mp_log"

    # Parse the output from mplayer to get data that faac will need
    # This is an example of the line we grep out: AO: [alsa] 44100hz 2ch s16le (2 bytes per sample)
    local audio=`grep '^AO:' "$mp_log"` || die "Failed to read (grep) $mp_log"
    local rate=$(expr "$audio" : 'AO: .* \(.*\)Hz.*')
    local chans=$(expr "$audio" : 'AO: .* .*Hz \(.*\)ch.*')
    local samplesize=$(expr "$audio" : 'AO: .* .*Hz .*ch s\([0-9]\+\).. .*')

    # faac will convert the pcm data to an m4b file adding metadata
    faac -R $rate -B $samplesize -C $chans -X -w -q 80 \
                  --artist "$WRITER"     --album "$ALBUM" --title "$TITLE" --track "1" \
                  --genre  "Spoken Word" --year  "$YEAR"  -o      "$m4bfile" "$pcmfile" \
                  --cover-art "$pic"

    exit 0
}

function main(){
    # main() is used to check parameters and then call makebook() 
    # for each of the sources provided. Note that the options have 
    # already been parsed.

    local params=($@)
    local paramlength=${#params[*]}
    local srctype
    local infer=$INFER
    local src
    local msg

    for p in ${params[*]}; do
        [ "${p:0:1}" = '-' ] && usage "Options must come before sources and destinations"
    done

    [ $paramlength -eq 0 ] && usage "No source or destination given"
    [ $paramlength -eq 1 ] && usage "No destination given"

    # If there are more than 1 source then metadata will need to be infered.
    # Specifying metadata for multiple sources would create a huge command line
    # which the user would probably not want to use.
    [ $paramlength -gt 2 ] && infer=true 

    # Pop the destination directory off the array (the destiation will always come
    # last) leaving only one or more sources. 
    local ubound=$((paramlength - 1))
    DEST=${params[$ubound]}; unset params[$ubound]
    local sources=(${params[@]})

    # Validate the sources
    for src in ${sources[*]}; do
        srctype=`getsrctype "$src"`
        [ -z "$srctype" ] && die "Source must be a zip file or an existing directory: $src"
        if [ "$srctype" = 'dir' ]; then
            local srclen=${#sources[*]}
            [ $srclen -gt 1 ] && usage "Only one directory can be used as a source"
            if $INFER; then usage "Can't use -i if a source is a directory"; fi
            infer=false
        fi
    done

    # Validate destination and create if necessary
    if [ ! -d "$DEST" ]; then
        local response
        local ext=`expr "$DEST" : ".*\.\(.\+\)$"`
        if [ -n "$ext" ]; then
            read -n1 -p "The destination directory ($DEST) contains an extention. Hit ctrl-c if this is not correct."
        fi
        read -n1 -p "$DEST doesn't exist. Create? [Y|n]" response
        [ -z "$response" -o "x$response" = "xY" ] && response=y
        [ "$response" = "y" ] || die "Need destination directory"
        mkdir -p "$DEST" || die "Failed mkdir $DEST"
    fi

    if ! $infer; then
        # If we are not infering metadata then make sure user 
        # supplied it
        msg="Use -i to infer metadata."
        [ -z "$WRITER" ] && usage "Missing writer (-w). $msg"
        [ -z "$ALBUM" ]  && usage "Missing album (-a). $msg"
        [ -z "$YEAR" ]   && usage "Missing year (-y). $msg"
    else
        # If we are not infering then make sure that metadate
        # was not supplied
        if    [ -n "$WRITER" ] || [ -n "$ALBUM" ]  \
           || [ -n "$YEAR" ]; then
            die "Writer, album and year are not applicable when multiple sources are given."
        fi
    fi

    # Validate coverart if it was given
    if [ -n "$PICTURE" ]; then  
        local remotepic=`isremote "$PICTURE"`
        if [ "$remotepic" = "1" ];then remotepic=true; else remotepic=false;fi

        if ! $remotepic; then
            [ -r "$PICTURE" ] || die "Can't read picture file: $PICTURE"
            [ -f "$PICTURE" ] || die "Picture is not a regular file: $PICTURE"
        fi
        local ext=`expr "$PICTURE" : ".*\.\(.\+\)$"`
        ext=`lc $ext`
        [ "x$ext" = "xjpeg" ] || [ "x$ext" = "xjpg" ] || \
        [ "x$ext" = "gxif" ] || [ "x$ext" = "xpcm" ] || die "Picture is in incorrect format: $PICTURE"
    fi

    # For each of the sources given, run makebook()
    for src in ${sources[*]}; do
        makebook "$src" $infer
    done
}

### BEGIN HERE ###
# Ensure dependencies are met
chkdepends || die "Dependencies were not met"

# Gather options
INFER=false
HELP=false
while getopts "h w: t: a: y: p: i" opt
do
    case "$opt" in
            h) HELP=true;;
            w) WRITER="$OPTARG";;
            t) TITLE="$OPTARG";;
            a) ALBUM="$OPTARG";;
            p) PICTURE="$OPTARG";;
            y) YEAR="$OPTARG";;
            i) INFER=true;;
    esac
done
shift $(($OPTIND-1))

if $HELP; then printhelp; die; fi

main $@
cleanup

